// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String?
  password         String
  createdAt        DateTime          @default(now())
  emailVerified    Boolean           @default(false)
  profile          UserProfile?
  BookAuthor       BookAuthor[]
  BookContributor  BookContributor[]
  authorBooks      Book[]            @relation("BookAuthor")
  contributorBooks Book[]            @relation("BookContributor")
  Book             Book[]
}

model UserProfile {
  id        String   @id @default(uuid())
  bio       String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Book {
  id              String            @id @default(uuid())
  title           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  description     String?
  creator         User              @relation(fields: [creatorId], references: [id])
  creatorId       String
  authors         User[]            @relation("BookAuthor")
  contributors    User[]            @relation("BookContributor")
  BookAuthor      BookAuthor[]
  BookContributor BookContributor[]
  parts           BookPart[]
}

model BookAuthor {
  id       String @id @default(uuid())
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@unique([bookId, authorId], name: "BookAuthor")
}

model BookContributor {
  id            String @id @default(uuid())
  book          Book   @relation(fields: [bookId], references: [id])
  bookId        String
  contributor   User   @relation(fields: [contributorId], references: [id])
  contributorId String

  @@unique([bookId, contributorId], name: "BookContributor")
}

model BookPart {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  book      Book      @relation(fields: [bookId], references: [id])
  bookId    String
  chapters  Chapter[]
}

model Chapter {
  id         String   @id @default(uuid())
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bookPart   BookPart @relation(fields: [bookPartId], references: [id])
  bookPartId String
  pages      Page[]
}

model Page {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId String
  content   String
}
